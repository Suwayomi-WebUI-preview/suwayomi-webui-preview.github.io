import{r as n,cZ as v,bK as E,a7 as p,cG as D,n as k,a9 as b,cf as R,l as I}from"./index-CquUQo3v.js";class r{static getIds(e){return e.map(t=>t.id)}static getFromCache(e,t=v,a="MANGA_BASE_FIELDS"){return n.graphQLClient.client.cache.readFragment({id:n.graphQLClient.client.cache.identify({__typename:"MangaType",id:e}),fragment:t,fragmentName:a})}static isNotDownloaded({downloadCount:e}){return e===0}static getNotDownloaded(e){return e.filter(r.isNotDownloaded)}static isFullyDownloaded({downloadCount:e,chapters:{totalCount:t}}){return e===t}static getFullyDownloaded(e){return e.filter(r.isFullyDownloaded)}static isPartiallyDownloaded(e){return!r.isNotDownloaded(e)&&!r.isFullyDownloaded(e)}static getPartiallyDownloaded(e){return e.filter(r.isPartiallyDownloaded)}static isUnread({unreadCount:e,chapters:{totalCount:t}}){return e===t}static getUnread(e){return e.filter(r.isUnread)}static isFullyRead({unreadCount:e}){return e===0}static getFullyRead(e){return e.filter(r.isFullyRead)}static isPartiallyRead(e){return!r.isUnread(e)&&!r.isFullyRead(e)}static getPartiallyRead(e){return e.filter(r.isPartiallyRead)}static getThumbnailUrl(e){const t=e.thumbnailUrl?"".concat(e.thumbnailUrl,"?fetchedAt=").concat(e.thumbnailUrlLastFetched):"";return n.getValidImgUrlFor(t)}static getDuplicateLibraryMangas(e){return n.getMangas(E,{condition:{inLibrary:!0},filter:{title:{likeInsensitive:e}}})}static async getChapterIdsWithState(e,t){const{data:a}=await n.getMangasChapterIdsWithState(e,t).response;return a.chapters.nodes}static async downloadChapters(e,{size:t,onlyUnread:a,downloadAhead:o=!1}={}){const[s,i]=await Promise.all([r.getChapterIdsWithState(e,{isRead:a?!1:void 0,isDownloaded:!1}),o?r.getChapterIdsWithState(e,{isRead:!1,isDownloaded:!0}):[]]),c=e.map(l=>[String(l),t]),u=Object.groupBy(s,({mangaId:l})=>l),d=Object.groupBy(i,({mangaId:l})=>l),w=Object.entries(d).map(([l,g=[]])=>{const h=Math.max(0,(t!=null?t:g.length)-g.length);return[l,o?h:t]}),f=Object.entries(Object.fromEntries([...c,...w])).map(([l,g])=>{var A;const h=(A=u[Number(l)])!=null?A:[];if(!h.length)return[];if(g===void 0)return h;const S=p.removeDuplicates(h[0],h).slice(0,g);return p.addDuplicates(S,h)}).flat();return f.length?p.download(p.getIds(f)):Promise.resolve()}static async deleteChapters(e){const t=await r.getChapterIdsWithState(e,{isDownloaded:!0});return p.delete(p.getIds(t))}static async markAsRead(e,t=!1){const a=await r.getChapterIdsWithState(e,{isRead:!1});return p.markAsRead(a,t,e.length===1?e[0]:void 0)}static async markAsUnread(e){const t=await r.getChapterIdsWithState(e,{isRead:!0});return p.markAsUnread(p.getIds(t))}static async removeFromLibrary(e){const{removeMangaFromCategories:t}=await D();return r.executeAction("remove_from_library",e.length,()=>n.updateMangas(e,{updateMangas:{inLibrary:!1},updateMangasCategories:t?{clearCategories:!0}:void 0}).response)}static async changeCategories(e,t){return r.executeAction("change_categories",e.length,()=>n.updateMangasCategories(e,t).response)}static migrateChapters(e,t,a){var d,w;if(!t.chapters||!((d=a.fetchChapters)!=null&&d.chapters))throw new Error("Chapters are missing");const o=t.chapters.nodes,s=(w=a.fetchChapters)==null?void 0:w.chapters,i=p.getMatchingChapterNumberChapters(o,s),c=[],u=[];return i.forEach(([m,f])=>{const{isRead:l,isBookmarked:g}=m;l&&c.push(f.id),g&&u.push(f.id)}),{copy:()=>[c.length&&n.updateChapters(c,{isRead:!0}).response,u.length&&n.updateChapters(u,{isBookmarked:!0}).response].filter(m=>!!m),cleanup:()=>{var m,f;return e==="migrate"?[n.deleteDownloadedChapters(p.getIds(p.getDownloaded((f=(m=t.chapters)==null?void 0:m.nodes)!=null?f:[]))).response]:[]}}}static migrateTracking(e,t,a){if(!t.trackRecords)throw new Error("TrackRecords of manga to migrate are missing");if(!a.trackRecords)throw new Error("TrackRecords of manga to migrate to are missing");const o=t.trackRecords.nodes.filter(s=>{var i;return(i=a.trackRecords)==null?void 0:i.nodes.every(c=>s.remoteId!==c.remoteId)});return{copy:()=>o.map(s=>n.bindTracker(a.id,s.trackerId,s.remoteId).response),cleanup:()=>{var s,i;return e==="migrate"?(i=(s=t.trackRecords)==null?void 0:s.nodes.map(c=>n.unbindTracker(c.id).response))!=null?i:[]:[]}}}static migrateManga(e,t,a,o,s){if(!(t!=null&&t.categories))throw new Error("Categories are missing");return{copy:()=>{var i;return[n.updateManga(a.id,{updateManga:{inLibrary:!0},updateMangaCategories:o?{addToCategories:(i=t.categories)==null?void 0:i.nodes.map(c=>c.id)}:void 0}).response]},cleanup:()=>e==="migrate"?[n.updateManga(t.id,{updateManga:{inLibrary:!1},updateMangaCategories:s?{clearCategories:!0}:void 0}).response]:[]}}static async migrate(e,t,{mode:a,migrateChapters:o,migrateCategories:s,migrateTracking:i,deleteChapters:c}){return r.executeAction("migrate",1,async()=>{var l,g;const[{data:u},{data:d},{removeMangaFromCategories:w}]=await Promise.all([n.getMangaToMigrate(e,{migrateChapters:o,migrateCategories:s,migrateTracking:i,deleteChapters:c}).response,n.getMangaToMigrateToFetch(t,{migrateChapters:o,migrateCategories:s,migrateTracking:i,apolloOptions:{errorPolicy:"all"}}).response,D()]);if(!u.manga||!((l=d==null?void 0:d.fetchManga)!=null&&l.manga))throw new Error("Mangas::migrate: missing manga data");if(o&&!u.manga.chapters)throw new Error("Mangas::migrate: missing chapters data");(g=d.fetchChapters)!=null&&g.chapters||(d.fetchChapters={chapters:[]});const m=async(h,...C)=>Promise.all(C.filter(([y])=>y).map(([,y])=>y[h]()).flat());await(async(...h)=>{const C=["copy","cleanup"];for(const y of C)await m(y,...h)})([o,r.migrateChapters(a,u.manga,d)],[i,r.migrateTracking(a,u.manga,d.fetchManga.manga)],[!0,r.migrateManga(a,u.manga,d.fetchManga.manga,!!s,w)])})}static async executeAction(e,t,a){try{await a(),k(b(R[e].success,{count:t}),"success")}catch(o){throw k(b(R[e].error,{count:t}),"error",I(o)),o}}static async performAction(e,t,{wasManuallyMarkedAsRead:a,changeCategoriesPatch:o,mangaIdToMigrateTo:s,downloadAhead:i,onlyUnread:c,size:u,...d}){switch(e){case"download":return r.downloadChapters(t,{downloadAhead:i,onlyUnread:c,size:u});case"delete":return r.deleteChapters(t);case"mark_as_read":return r.markAsRead(t,a);case"mark_as_unread":return r.markAsUnread(t);case"remove_from_library":return r.removeFromLibrary(t);case"change_categories":return r.changeCategories(t,o);case"migrate":return r.migrate(t[0],s,d);default:throw new Error('Mangas::performAction: unknown action "'.concat(e,'"'))}}}export{r as M};
