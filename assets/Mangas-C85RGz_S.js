import{a as s,cg as R,bf as S,b$ as f,m as C,D as k}from"./index-DUxXg8iH.js";import{C as u}from"./Chapters-BKg1NJBL.js";const D={download:{action:{single:"chapter.action.download.add.label.action",selected:"chapter.action.download.add.button.selected"},success:"chapter.action.download.add.label.success",error:"chapter.action.download.add.label.error"},delete:{action:{single:"chapter.action.download.delete.label.action",selected:"chapter.action.download.delete.button.selected"},success:"chapter.action.download.delete.label.success",error:"chapter.action.download.delete.label.error"},mark_as_read:{action:{single:"chapter.action.mark_as_read.add.label.action.current",selected:"chapter.action.mark_as_read.add.button.selected"},success:"chapter.action.mark_as_read.add.label.success",error:"chapter.action.mark_as_read.add.label.error"},mark_as_unread:{action:{single:"chapter.action.mark_as_read.remove.label.action",selected:"chapter.action.mark_as_read.remove.button.selected"},success:"chapter.action.mark_as_read.remove.label.success",error:"chapter.action.mark_as_read.remove.label.error"},remove_from_library:{action:{single:"manga.action.library.remove.label.action",selected:"manga.action.library.remove.button.selected"},success:"manga.action.library.remove.label.success",error:"manga.action.library.remove.label.error"},change_categories:{action:{single:"manga.action.category.label.action",selected:"manga.action.category.button.selected"},success:"manga.action.category.label.success",error:"manga.action.category.label.error"},migrate:{action:{single:"global.button.migrate",selected:"global.button.migrate"},success:"manga.action.migrate.label.success",error:"manga.action.migrate.label.error"},track:{action:{single:"manga.action.track.add.label.action",selected:"manga.action.track.add.label.action"},success:"manga.action.track.add.label.success",error:"manga.action.track.add.label.error"}};class t{static getIds(e){return e.map(a=>a.id)}static getFromCache(e,a=R,r="MANGA_BASE_FIELDS"){return s.graphQLClient.client.cache.readFragment({id:s.graphQLClient.client.cache.identify({__typename:"MangaType",id:e}),fragment:a,fragmentName:r})}static isNotDownloaded({downloadCount:e}){return e===0}static getNotDownloaded(e){return e.filter(t.isNotDownloaded)}static isFullyDownloaded({downloadCount:e,chapters:{totalCount:a}}){return e===a}static getFullyDownloaded(e){return e.filter(t.isFullyDownloaded)}static isPartiallyDownloaded(e){return!t.isNotDownloaded(e)&&!t.isFullyDownloaded(e)}static getPartiallyDownloaded(e){return e.filter(t.isPartiallyDownloaded)}static isUnread({unreadCount:e,chapters:{totalCount:a}}){return e===a}static getUnread(e){return e.filter(t.isUnread)}static isFullyRead({unreadCount:e}){return e===0}static getFullyRead(e){return e.filter(t.isFullyRead)}static isPartiallyRead(e){return!t.isUnread(e)&&!t.isFullyRead(e)}static getPartiallyRead(e){return e.filter(t.isPartiallyRead)}static getThumbnailUrl(e){const a=e.thumbnailUrl?"".concat(e.thumbnailUrl,"?fetchedAt=").concat(e.thumbnailUrlLastFetched):"nonExistingMangaUrl";return s.getValidImgUrlFor(a)}static getDuplicateLibraryMangas(e){return s.getMangas(S,{condition:{inLibrary:!0},filter:{title:{likeInsensitive:e}}})}static async getChapterIdsWithState(e,a){const{data:r}=await s.getMangasChapterIdsWithState(e,a).response;return r.chapters.nodes}static async downloadChapters(e,{size:a,onlyUnread:r,downloadAhead:n=!1}={}){const[o,d]=await Promise.all([t.getChapterIdsWithState(e,{isRead:r?!1:void 0,isDownloaded:!1}),n?t.getChapterIdsWithState(e,{isRead:!1,isDownloaded:!0}):[]]),h=e.map(i=>[String(i),a]),l=Object.groupBy(o,({mangaId:i})=>i),c=Object.groupBy(d,({mangaId:i})=>i),w=Object.entries(c).map(([i,p=[]])=>{const m=Math.max(0,(a!=null?a:p.length)-p.length);return[i,n?m:a]}),g=Object.entries(Object.fromEntries([...h,...w])).map(([i,p])=>{var y;const m=(y=l[Number(i)])!=null?y:[];if(!m.length)return[];if(p===void 0)return m;const A=u.removeDuplicates(m[0],m).slice(0,p);return u.addDuplicates(A,m)}).flat();return g.length?u.download(u.getIds(g)):Promise.resolve()}static async deleteChapters(e){const a=await t.getChapterIdsWithState(e,{isDownloaded:!0});return u.delete(u.getIds(a))}static async markAsRead(e,a=!1){const r=await t.getChapterIdsWithState(e,{isRead:!1});return u.markAsRead(r,a,e.length===1?e[0]:void 0)}static async markAsUnread(e){const a=await t.getChapterIdsWithState(e,{isRead:!0});return u.markAsUnread(u.getIds(a))}static async removeFromLibrary(e){const{removeMangaFromCategories:a}=await f();return t.executeAction("remove_from_library",e.length,()=>s.updateMangas(e,{updateMangas:{inLibrary:!1},updateMangasCategories:a?{clearCategories:!0}:void 0}).response)}static async changeCategories(e,a){return t.executeAction("change_categories",e.length,()=>s.updateMangasCategories(e,a).response)}static async migrateChapters(e,a){var l,c;if(!e.chapters||!((l=a.fetchChapters)!=null&&l.chapters))throw new Error("Chapters are missing");const r=e.chapters.nodes,n=(c=a.fetchChapters)==null?void 0:c.chapters,o=u.getMatchingChapterNumberChapters(r,n),d=[],h=[];o.forEach(([w,b])=>{const{isRead:g,isBookmarked:i}=w;g&&d.push(b.id),i&&h.push(b.id)}),await Promise.all([d.length&&s.updateChapters(d,{isRead:!0}).response,h.length&&s.updateChapters(h,{isBookmarked:!0}).response])}static async migrateCategories(e,a){if(!(e!=null&&e.categories))throw new Error("Categories are missing");await s.updateMangasCategories([a.id],{addToCategories:e.categories.nodes.map(r=>r.id)}).response}static async migrateTracking(e,a,r){if(!a.trackRecords)throw new Error("TrackRecords of manga to migrate are missing");if(!r.trackRecords)throw new Error("TrackRecords of manga to migrate to are missing");const n=a.trackRecords.nodes.filter(o=>r.trackRecords.nodes.every(d=>o.remoteId!==d.remoteId));await Promise.all([...e==="migrate"?a.trackRecords.nodes.map(o=>s.unbindTracker(o.id).response):[],...n.map(o=>s.bindTracker(r.id,o.trackerId,o.remoteId))])}static async migrate(e,a,{mode:r,migrateChapters:n,migrateCategories:o,migrateTracking:d,deleteChapters:h}){return t.executeAction("migrate",1,async()=>{var b,g,i,p;const[{data:l},{data:c},{removeMangaFromCategories:w}]=await Promise.all([s.getMangaToMigrate(e,{migrateChapters:n,migrateCategories:o,migrateTracking:d,deleteChapters:h}).response,s.getMangaToMigrateToFetch(a,{migrateChapters:n,migrateCategories:o,migrateTracking:d}).response,f()]);if(!l.manga||!((b=c==null?void 0:c.fetchManga)!=null&&b.manga))throw new Error("Mangas::migrate: missing manga data");if(n&&(!l.manga.chapters||!((g=c.fetchChapters)!=null&&g.chapters)))throw new Error("Mangas::migrate: missing chapters data");await Promise.all([n?t.migrateChapters(l.manga,c):void 0,h?s.deleteDownloadedChapters(u.getIds(u.getDownloaded((p=(i=l.manga.chapters)==null?void 0:i.nodes)!=null?p:[]))).response:void 0,o?t.migrateCategories(l.manga,c.fetchManga.manga):void 0,d?t.migrateTracking(r,l.manga,c.fetchManga.manga):void 0,c.fetchManga.manga.inLibrary?void 0:s.updateManga(a,{updateManga:{inLibrary:!0}}).response,r==="migrate"?s.updateManga(e,{updateManga:{inLibrary:!1},updateMangaCategories:w?{clearCategories:!0}:void 0}).response:void 0])})}static async executeAction(e,a,r){try{await r(),C(k(D[e].success,{count:a}),"success")}catch(n){throw C(k(D[e].error,{count:a}),"error"),n}}static async performAction(e,a,{wasManuallyMarkedAsRead:r,changeCategoriesPatch:n,mangaIdToMigrateTo:o,downloadAhead:d,onlyUnread:h,size:l,...c}){switch(e){case"download":return t.downloadChapters(a,{downloadAhead:d,onlyUnread:h,size:l});case"delete":return t.deleteChapters(a);case"mark_as_read":return t.markAsRead(a,r);case"mark_as_unread":return t.markAsUnread(a);case"remove_from_library":return t.removeFromLibrary(a);case"change_categories":return t.changeCategories(a,n);case"migrate":return t.migrate(a[0],o,c);default:throw new Error('Mangas::performAction: unknown action "'.concat(e,'"'))}}}export{t as M,D as a};
